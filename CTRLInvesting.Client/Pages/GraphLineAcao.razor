@inject IAcoesService acoesService
@inject ISnackbar snackbar

<MudOverlay @bind-Visible="isVisible" DarkBackground="true" AutoClose="false">
    <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
</MudOverlay>
<MudStack Row="true">
    <MudButtonGroup Color="Color.Primary" Variant="Variant.Outlined">
        <MudButton Class="@StyleFor7dButton(periodo)" Color="Color.Error" ButtonType="MudBlazor.ButtonType.Button"
                   Disabled="@periodo7d" OnClick="@(async () => await TrocaPeriodo("7d"))">
            7D
        </MudButton>
        <MudButton Class="@StyleFor3mButton(periodo)" ButtonType="MudBlazor.ButtonType.Button" Disabled="@periodo3mo"
                   OnClick="@(async () => await TrocaPeriodo("3mo"))">
            3M
        </MudButton>
        <MudButton Class="@StyleFor6mButton(periodo)" ButtonType="MudBlazor.ButtonType.Button" Disabled="@periodo6mo"
                   OnClick="@(async () => await TrocaPeriodo("6mo"))">
            6M
        </MudButton>
        <MudButton Class="@StyleFor5yButton(periodo)" ButtonType="MudBlazor.ButtonType.Button" Disabled="@periodo5y"
                   OnClick="@(async () => await TrocaPeriodo("5y"))">5A</MudButton>
        <MudButton Class="@StyleForMaxButton(periodo)" ButtonType="MudBlazor.ButtonType.Button" Disabled="@periodoMax"
                   OnClick="@(async () => await TrocaPeriodo("max"))">
            Tudo
        </MudButton>
    </MudButtonGroup>
    <MudSpacer />
    <MudText Inline="true">
        Var: <MudText Inline="true" Style="font-weight: bold;"
                      Color="@(PercentVariation > 0 ? Color.Success : PercentVariation == 0 ? Color.Default : Color.Error)">
            @PercentVariation.ToString("P2")
        </MudText>
    </MudText>
    <MudText>Max: @MaxValue.ToString("C")</MudText>
    <MudText>Min: @MinValue.ToString("C")</MudText>
</MudStack>
<div style="background: #fff; margin-top: 10px; border-radius: 5px; width: 900px;">
    <LineChart @ref="lineChart" Width="900" Class="mb-4 mr-5" />
</div>


@code {
    [Parameter]
    public string Ticket { get; set; }
    private bool isVisible = false;
    private string periodo = "7d";
    private LineChart lineChart = default!;
    private LineChartOptions lineChartOptions = default!;
    private ChartData chartData = default!;
    private List<string> _Labels = new List<string>();
    private List<double?> _Data = new List<double?>();
    private bool periodo7d = false;
    private bool periodo3mo = false;
    private bool periodo6mo = false;
    private bool periodo5y = false;
    private bool periodoMax = false;
    private Double MinValue;
    private Double MaxValue;
    private Double PercentVariation;

    protected override async void OnInitialized()
    {
        cData(periodo);
        //await DisablePeriodos();
    }

    async Task DisablePeriodos()
    {
        isVisible = true;
        await Task.Delay(500);
        try
        {
            acoesService.GetVariacaoAcao(Ticket, "7d");
        }
        catch (Exception e)
        {
            periodo7d = true;
        }
        try
        {
            acoesService.GetVariacaoAcao(Ticket, "3mo");
        }
        catch (Exception e)
        {
            periodo3mo = true;
        }
        try
        {
            acoesService.GetVariacaoAcao(Ticket, "6mo");
        }
        catch (Exception e)
        {
            periodo6mo = true;
        }
        try
        {
            acoesService.GetVariacaoAcao(Ticket, "5y");
        }
        catch (Exception e)
        {
            periodo5y = true;
        }
        try
        {
            acoesService.GetVariacaoAcao(Ticket, "max");
        }
        catch (Exception e)
        {
            periodoMax = true;
        }
        isVisible = false;
        StateHasChanged();
    }

    bool cData(string periodo)
    {
        try
        {
            var variacoes = acoesService.GetVariacaoAcao(Ticket, periodo);
            List<string> formatKeys = new List<string>();
            foreach (var item in variacoes.Keys)
            {
                formatKeys.Add(DateTime.Parse(item).ToString("dd/MM/yyyy"));
            }
            List<double?> formatValues = new List<double?>();
            foreach (var item in variacoes.Values)
            {
                formatValues.Add(double.Parse(item.ToString("N2")));
            }
            _Labels = formatKeys;
            _Data = formatValues;
            MinValue = _Data.Min().Value;
            MaxValue = _Data.Max().Value;
            PercentVariation = (_Data.Last().Value - _Data.First().Value) / _Data.First().Value;
            var colors = ColorUtility.CategoricalTwelveColors;

            var datasets = new List<IChartDataset>();

            var dataset1 = new LineChartDataset
            {
                Data = _Data,
                BackgroundColor = colors[0],
                BorderColor = colors[0],
                BorderWidth = 2,
                HoverBorderWidth = 4,
                PointBackgroundColor = new List<string> { colors[0] },
                PointRadius = new List<double> { 0 }, // hide points
                PointHoverRadius = new List<double> { 4 },
                Label = Ticket,
                SpanGaps = true
            };
            datasets.Add(dataset1);

            chartData = new ChartData
            {
                Labels = _Labels,
                Datasets = datasets
            };

            lineChartOptions = new();
            lineChartOptions.Responsive = true;
            lineChartOptions.Locale = "pt-BR";
            lineChartOptions.Plugins.Datalabels = new LineChartDataLabels
            {
                Padding = 10,
                Color = "white"
            };
            lineChartOptions.Plugins.Tooltip = new ChartPluginsTooltip
            {
                BodyFont = new ChartPluginsTooltipFont
                {
                    Size = 30,
                },
                TitleFont = new ChartPluginsTooltipFont
                {
                    Size = 20,
                }
            };
            lineChartOptions.Scales.Y = new ChartAxes
            {
                Min = MinValue - 5,
                Max = MaxValue + 5
            };
            lineChartOptions.Layout = new ChartLayout { AutoPadding = true };
            lineChartOptions.Interaction = new Interaction { Mode = InteractionMode.Index };
            return true;
        }
        catch
        {
            snackbar.Add("Não foi possível obter os dados desse período");
            return false;
        }
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await lineChart.InitializeAsync(chartData, lineChartOptions);
        }
        await base.OnAfterRenderAsync(firstRender);
    }

    async Task TrocaPeriodo(string per)
    {
        periodo = per;
        if (cData(periodo))
            await lineChart.UpdateAsync(chartData, lineChartOptions);
    }
    string StyleFor7dButton(string periodo)
    {
        if (periodo == "7d")
            return "btnPeriodSelected";
        return "";
    }
    string StyleFor3mButton(string periodo)
    {
        if (periodo == "3mo")
            return "btnPeriodSelected";
        return "";
    }
    string StyleFor6mButton(string periodo)
    {
        if (periodo == "6mo")
            return "btnPeriodSelected";
        return "";
    }
    string StyleFor5yButton(string periodo)
    {
        if (periodo == "5y")
            return "btnPeriodSelected";
        return "";
    }
    string StyleForMaxButton(string periodo)
    {
        if (periodo == "max")
            return "btnPeriodSelected";
        return "";
    }
}