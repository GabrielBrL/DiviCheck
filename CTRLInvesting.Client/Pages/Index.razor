@page "/"
@inject IAcoesService acoesService
@* @inject Blazored.LocalStorage.ILocalStorageService _localStore *@
@inject ISnackbar Snackbar
@using System.Timers

@if (loading)
{
    <MudProgressLinear Color="Color.Primary" Indeterminate="true" Class="my-7" />
}
<MudGrid Justify="Justify.Center">
    <MudItem xs="12" sm="4">
        <MudTextField T="string" @bind-Value="@searchText" TextChanged="@FilterData" Immediate="true"
            Placeholder="Digite o ticket da empresa" Variant="Variant.Outlined" />
    </MudItem>
</MudGrid>
<ListaAcoesFiltradas containsStock="containsStock" filterData="filterData" _acoesFiltradas="_acoesFiltradas"
    _acoesCompradas="_acoesCompradas" idUsuario="idUsuario" />

@if (!filterData && _acoesFiltradas.Count == 0 && containsStock)
{
    <MudGrid Justify="Justify.Center">
        <MudItem xs="8">
            @* <MudPaper Elevation="25"> *@
            <MudText Align="Align.Justify" Inline="true" Typo="Typo.h5" Class="p-5">
                <p>O <b>Divi Check</b> é a sua plataforma para acompanhar o mercado de ações, analisar dividendos e
                    criar e simular carteiras personalizadas.</p>
                <p> Nessa etapa você pode pesquisar pelos papeis que possui ou que
                    deseja similuar seus investimetos.
                </p>
            </MudText>
            @* </MudPaper> *@
        </MudItem>
    </MudGrid>
}

<AdsComponente/>

@code {
    [CascadingParameter] private Task<AuthenticationState> authenticationStateTask { get; set; }
    private List<Stock> _tickets = new List<Stock>();
    private string? searchText;
    private List<StockDataDetails> _acoesFiltradas = new List<StockDataDetails>();
    private List<StockDataDetails> _acoesCompradas = new();
    private Snackbar _snackBar;
    private bool loading;
    private bool containsStock = true;
    private bool filterData = false;
    private int idUsuario;
    private Timer typingTimer;
    protected override async Task OnInitializedAsync()
    {
        _tickets = await acoesService.GetAllTicketsAsync();
        @* var acoesStorage = await _localStore.GetItemAsync<List<StockDataDetails>>("acoes"); *@
        var user = await authenticationStateTask;
        var identity = user.User.Identity;
        if (identity.IsAuthenticated)
        {
            idUsuario = Int32.Parse(user.User.Claims.Where(_ => _.Type == "IdUsuario").Select(_ => _.Value).First());
        }
    }
    private void FilterData()
    {
        filterData = true;
        containsStock = true;
        typingTimer?.Stop();
        typingTimer = new Timer(500);
        typingTimer.Elapsed += TypingTimerElapsed;
        typingTimer.Start();
    }

    void TypingTimerElapsed(object sender, ElapsedEventArgs e)
    {

        typingTimer?.Stop();
        GetItems();
        InvokeAsync(() => this.StateHasChanged());
    }

    void GetItems()
    {
        _acoesFiltradas.Clear();
        string value = searchText;
        if (value.Length > 3)
        {
            var result = _tickets.Where(x => x.Symbol.StartsWith(value, StringComparison.OrdinalIgnoreCase) ||
            x.LongName.Contains(value, StringComparison.OrdinalIgnoreCase));
            foreach (var item in result)
            {
                var stock = new StockDataDetails();
                try
                {
                    stock = acoesService.GetAcao(item.Symbol);
                }
                catch
                {
                    _snackBar = Snackbar.Add($"Não existe informação atualizada do papel {item.Symbol}", Severity.Warning);
                }
                if (stock.CurrentPrice != null)
                {
                    _acoesFiltradas.Add(stock);
                }
            }
            filterData = false;
            if (_acoesFiltradas.Count == 0)
                containsStock = false;
            return;
        }
        if (searchText.Length == 0)
            filterData = false;
    }
}