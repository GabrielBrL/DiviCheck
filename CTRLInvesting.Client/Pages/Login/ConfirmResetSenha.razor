@layout LoginLayout
@page "/confirm-reset/{hash}"

@using CTRLInvesting.Client.Validations
@using CTRLInvesting.Model.Usuario;

@inject IUsuarioService _userService
@inject FluentValidationConfirmResetSenha formValid
@inject NavigationManager _nav
@inject ISnackbar Snackbar

<MudForm Model="@model" @ref="@form" Disabled="@loading" Validation="formValid.ValidateValue" ValidationDelay="0">
    <MudGrid Justify="Justify.Center">
        <MudItem xs="12">
            <MudCard>
                <MudCardContent>                
                    <MudTextField Label="Nova senha" HelperText="Max. 20 caracteres" Class="mt-3"
                        @bind-Value="model.Password" For="@(() => model.Password)" InputType="@PasswordInput" Adornment="Adornment.End" AdornmentIcon="@PasswordInputIcon" OnAdornmentClick="ButtonChangeVisibility" AdornmentAriaLabel="Mostrar senha" />
                    <MudTextField Label="Confirme a senha" HelperText="Repita a senha" Class="mt-3"
                        @bind-Value="model.ConfirmPassword" For="@(() => model.ConfirmPassword)"
                        InputType="@PasswordConfirmInput" Adornment="Adornment.End" AdornmentIcon="@PasswordConfirmInputIcon" OnAdornmentClick="ButtonConfirmChangeVisibility" AdornmentAriaLabel="Mostrar senha" />
                </MudCardContent>
                <MudCardActions>
                    <MudButton Variant="Variant.Filled" Color="Color.Success" Class="ml-auto" Disabled="@loading"
                        OnClick="@(async () => await OnValidSubmit())">Salvar</MudButton>
                    <MudSpacer />
                    <MudButton ButtonType="MudBlazor.ButtonType.Button" OnClick='(() => _nav.NavigateTo("/"))' Disabled="@loading"
                        Variant="Variant.Filled" Class="ml-auto">Voltar</MudButton>
                </MudCardActions>
            </MudCard>
        </MudItem>
    </MudGrid>
</MudForm>

@code {
    [Parameter]
    public string Hash { get; set; }
    Usuario UserReset;
    MudForm form;
    private Snackbar? _snackBar;
    ResetSenhaModel model = new ResetSenhaModel();
    private bool loading = false;
    bool isShow;
    bool isShowConfirm;
    InputType PasswordInput = InputType.Password;
    InputType PasswordConfirmInput = InputType.Password;
    string PasswordInputIcon = Icons.Material.Filled.VisibilityOff;
    string PasswordConfirmInputIcon = Icons.Material.Filled.VisibilityOff;

    protected override async Task OnParametersSetAsync()
    {
        try
        {
            UserReset = await _userService.GetUserByHashAsync(Hash);
        }
        catch(Exception e)
        {
            _nav.NavigateTo("/");
        }
    }
    private async Task OnValidSubmit()
    {
        loading = true;
        await form.Validate();
        if (form.IsValid)
        {            
            var modelReset = new UserResetModel{Hash = UserReset.JwtToken, NewPassword = model.Password};
            var result = await _userService.ResetSenha(modelReset);
            if (result != "Erro")
            {
                _snackBar = Snackbar.Add("FaÃ§a novamente o login.", Severity.Success, opt =>
                {
                    opt.ShowCloseIcon = true;
                    opt.VisibleStateDuration = 10000;

                });
                _nav.NavigateTo("/login");
                return;
            }            
        }        
        loading = false;
    }
    void ButtonChangeVisibility()
    {
        @if (isShow)
        {
            isShow = false;
            PasswordInputIcon = Icons.Material.Filled.VisibilityOff;
            PasswordInput = InputType.Password;
        }
        else {
            isShow = true;
            PasswordInputIcon = Icons.Material.Filled.Visibility;
            PasswordInput = InputType.Text;
        }
    }
    void ButtonConfirmChangeVisibility()
    {
        @if (isShowConfirm)
        {
            isShowConfirm = false;
            PasswordConfirmInputIcon = Icons.Material.Filled.VisibilityOff;
            PasswordConfirmInput = InputType.Password;
        }
        else {
            isShowConfirm = true;
            PasswordConfirmInputIcon = Icons.Material.Filled.Visibility;
            PasswordConfirmInput = InputType.Text;
        }
    }
}    
