@layout LoginLayout
@page "/login"
@using CTRLInvesting.Model.Usuario
@using Providers

@inject AuthenticationStateProvider _authProvider
@inject ISnackbar Snackbar
@inject IUsuarioService _userService
@inject Blazored.LocalStorage.ILocalStorageService _localStore
@inject NavigationManager _nav

<EditForm Model="@model" OnValidSubmit="OnValidSubmit">
    <DataAnnotationsValidator />
    <MudGrid Justify="Justify.Center">
        <MudItem xs="12">
            <MudCard>
                <MudCardContent>
                    <MudTextField Disabled="@loading" Label="Usuário ou email" @bind-Value="model.Usuario"
                        For="@(() => model.Usuario)" MaxLength="100" />
                    <MudTextField Disabled="@loading" Label="Senha" Class="mt-3" @bind-Value="model.Password"
                        For="@(() => model.Password)" InputType="InputType.Password" />
                </MudCardContent>
                <MudCardActions>
                    <MudButton ButtonType="MudBlazor.ButtonType.Submit" Color="Color.Success" Disabled="@loading" Variant="Variant.Filled"
                        Class="ml-auto">Entrar</MudButton>
                    <MudSpacer />                    
                    <MudButton ButtonType="MudBlazor.ButtonType.Button" OnClick='(() => _nav.NavigateTo("/"))' Disabled="@loading" Variant="Variant.Filled"
                        Class="ml-auto">Voltar</MudButton>
                </MudCardActions>
            </MudCard>
        </MudItem>
        <MudItem xs="12">            
            Não possui conta? <MudLink OnClick='(() => _nav.NavigateTo("/register"))' Underline="Underline.Always" Disabled="@loading">Registre-se</MudLink>
        </MudItem>
    </MudGrid>
</EditForm>
@if (loading)
{
    <MudProgressLinear Color="Color.Default" Indeterminate="true" Class="my-7" />
}

@code {
    LoginModel model = new LoginModel();
    private Snackbar? _snackBar;
    private bool loading = false;
    private async Task OnValidSubmit(EditContext context)
    {
        loading = true;
        string result = await _userService.Login(model);
        if (result != "Usuário ou senha incorretos")
        {
            await _localStore.SetItemAsync<string>("token", result);
            (_authProvider as CustomAuthProvider).NotifyAuthState();
            _nav.NavigateTo("/");
        }
        if (result == "Usuário ou senha incorretos")
            _snackBar = Snackbar.Add(result, Severity.Error);
        else
            _snackBar = Snackbar.Add($"Sucesso!", Severity.Success);
        StateHasChanged();
        loading = false;
    }
}