@page "/carteira"

@inject IInvestimentosService investimentos
@inject IAcoesService acoesService
@inject Blazored.LocalStorage.ILocalStorageService _localStore
@inject NavigationManager _nav
@inject ISnackbar Snackbar

<MudOverlay @bind-Visible="loading" DarkBackground="true" ZIndex="9999" AutoClose="true">
    <MudProgressCircular Color="Color.Default" Indeterminate="true" />
</MudOverlay>
<AuthorizeView Roles="Free,Premium">
    <PageTitle>Minha Carteira</PageTitle>

    <MudText Typo="Typo.h2" Align="Align.End">Minha Carteira</MudText>
    <MudText Typo="Typo.h5" Align="Align.End">Patrimônio @patrimonioTotal.ToString("C")</MudText>
    <MudText Typo="Typo.body1" Align="Align.End">Total de ativos @totalAtivos</MudText>
    <MudStack Row="true" Class="mt-5 mb-5">
         <MudPaper Height="100%">
           <MudList Clickable="true" Color="Color.Primary" @bind-SelectedItem="selectedItem"
                @bind-SelectedValue="selectedValue" Class="mudListCarteira p-0">
                <MudListItem Text="Carteira" Icon="@Icons.Material.Filled.Wallet" Value="1" />
                <MudListItem Text="Gráfico" Icon="@Icons.Material.Filled.BarChart" Value="2" />
                <MudListItem Text="Dividendos" Icon="@Icons.Material.Filled.AttachMoney" Value="3" />
            </MudList>           
        </MudPaper>
        <MudPaper Width="100%" Elevation="0">
            @if (_acoesCompradas != null && _acoesCompradas.Count != 0)
            {
                @if (selectedValue?.ToString() == "1")
                {
                    <MudStack Row="true" Spacing="0">
                    <MudGrid Class="p-3" Spacing="1" Justify="Justify.FlexStart">
                        @foreach (var acao in _acoesCompradas)
                        {
                            <AcoesCompradas acao="acao" BuyAcaoParameter="BuyAcao" SellAcaoParameter="SellAcao" SellAllAcoesParameter="SellAllAcao" />
                        }
                    </MudGrid>
                    <MudPaper Elevation="0">
                        <MudIconButton Variant="Variant.Text" Href="/" Color="Color.Primary" aria-label="Adicionar ações"
                            Size="MudBlazor.Size.Large" Icon="@Icons.Material.Filled.Add" />
                    </MudPaper>
                    </MudStack>
                }
                @if (selectedValue?.ToString() == "2")
                {                    
                    <ComposicaoCarteira acoes="_composicaoAcoes" />                    
                }
                @if (selectedValue?.ToString() == "3")
                {                    
                    <Dividendos acoesPapel="_acoesCompradas" />                
                }
            }
            else
            {
                <MudGrid Class="p-3">
                    <MudItem xs="12">
                        <MudPaper Elevation="0" Class="d-flex align-center justify-center mud-width-full py-8">
                            <MudIconButton Variant="Variant.Text" Href="/" Color="Color.Primary" Title="Adicionar ações"
                                Size="MudBlazor.Size.Large" Icon="@Icons.Material.Filled.Add" />
                        </MudPaper>
                    </MudItem>
                </MudGrid>
            }
        </MudPaper>
    </MudStack>
</AuthorizeView>

@code {
    [CascadingParameter] protected Task<AuthenticationState> AuthStat { get; set; }
    private List<StockDataDetails> _acoesCompradas = new List<StockDataDetails>();
    private List<KeyValuePair<string, double>> _composicaoAcoes = new List<KeyValuePair<string, double>>();
    private List<string> _acoesPapel;
    private double patrimonioTotal = 0;
    private int totalAtivos = 0;
    private Snackbar? _snackBar;
    MudListItem? selectedItem;
    static object selectedValue = 1;
    private int idUsuario;
    private bool loading;
    protected override async Task OnInitializedAsync()
    {
        loading = true;
        var user = (await AuthStat).User;
        bool authenticated = user.Identity.IsAuthenticated;
        if(authenticated){
            try
            {
                idUsuario = Int32.Parse(user.Claims.Where(_ => _.Type == "IdUsuario").Select(_ => _.Value).First());
                await cData(idUsuario);
                if (_acoesCompradas.Count == 0)
                    _snackBar = Snackbar.Add("Não há empresas na sua carteira", Severity.Warning, option =>
                    {
                        option.CloseAfterNavigation = true;
                    });
            }
            catch (Exception e)
            {
                _snackBar = Snackbar.Add("Não há empresas na sua carteira", Severity.Warning, option =>
                {
                    option.CloseAfterNavigation = true;
                });
            }
            StateHasChanged();
            loading = false;
            return;
        }
        _nav.NavigateTo("/login");
    }     
    private async Task cData(int idUsuario)
    {           
        await Task.Delay(1000);
        _acoesCompradas = investimentos.GetStockDataDetails(idUsuario);            
        patrimonioTotal = 0;
        _composicaoAcoes.Clear();
        foreach (var item in _acoesCompradas)
        {
            acoesService.GetVariationStocks(item);
            var cotacao = item.CurrentPrice.Value;
            double valorTotal = Convert.ToDouble(item.NumeroAcoes * cotacao);
            _composicaoAcoes.Add(new KeyValuePair<string, double>(item.Symbol, valorTotal));
            patrimonioTotal += cotacao * item.NumeroAcoes;
        }
        totalAtivos = _acoesCompradas.Count;
        StateHasChanged();        
    }
    private async Task SellAcao(StockDataDetails acao)
    {       
        if (acao.NumeroAcoes == acao.NumeroAcoesVendidas)
        {
            await SellAllAcao(acao);
            return;
        }
        if (acao.NumeroAcoes >= acao.NumeroAcoesVendidas && acao.NumeroAcoesVendidas != 0)
        {
            var acoesSelected = _acoesCompradas.First(x => x.Symbol == acao.Symbol);
            acoesSelected.NumeroAcoes -= acao.NumeroAcoesVendidas;
            await _localStore.SetItemAsync<List<StockDataDetails>>("acoes", _acoesCompradas);
            var qtdVendidas =  _acoesCompradas.First(x => x.Symbol == acao.Symbol).NumeroAcoes;
            var formStock = new FormStocks{IdUsuario = idUsuario, Symbol = acao.Symbol.Substring(0,acao.Symbol.IndexOf('.')), NumeroAcoes = qtdVendidas };
            await investimentos.UpdateStockDataDetails(formStock);
            _snackBar = Snackbar.Add($"Você vendeu {acao.NumeroAcoesVendidas} ações {acao.Symbol.Substring(0, acao.Symbol.IndexOf('.'))}", Severity.Success, option =>
            {
                option.CloseAfterNavigation = true;
            });
            await cData(idUsuario);
            return;
        }
        _snackBar = Snackbar.Add($"Você não pode vender essa quantidade", Severity.Error, option =>
        {
            option.CloseAfterNavigation = true;
        });
    }

    private async Task SellAllAcao(StockDataDetails acao)
    {        
        var numAcoes = acao.NumeroAcoes;
        _acoesCompradas.Remove(acao);
        await _localStore.SetItemAsync<List<StockDataDetails>>("acoes", _acoesCompradas);
        var formStock = new FormStocks{IdUsuario = idUsuario, Symbol = acao.Symbol.Substring(0,acao.Symbol.IndexOf('.'))};
        await investimentos.DeleteStockDataDetails(formStock);
        _snackBar = Snackbar.Add($"Você vendeu {numAcoes} ações {acao.Symbol.Substring(0, acao.Symbol.IndexOf('.'))}", Severity.Success, option =>
        {
            option.CloseAfterNavigation = true;
        });
        await cData(idUsuario);
    }

    private async Task BuyAcao(StockDataDetails acao)
    {                
        var numAcoes = acao.NumeroAcoesVendidas;
        if(numAcoes > 0){
            var acaoSelected = _acoesCompradas.FirstOrDefault(x => x.Symbol == acao.Symbol);
            acaoSelected.NumeroAcoes += numAcoes;
            await _localStore.SetItemAsync<List<StockDataDetails>>("acoes", _acoesCompradas);
            var formStock = new FormStocks{IdUsuario = idUsuario, Symbol = acao.Symbol.Substring(0,acao.Symbol.IndexOf('.')), NumeroAcoes = acaoSelected.NumeroAcoes};
            await investimentos.UpdateStockDataDetails(formStock);
            _snackBar = Snackbar.Add($"Parabéns!! {numAcoes} ações {acao.Symbol.Substring(0, acao.Symbol.IndexOf('.'))} foram adicionadas na sua carteira.", Severity.Success, option =>
            {
                option.CloseAfterNavigation = true;
            });
            await cData(idUsuario);                   
            return;
        }
        _snackBar = Snackbar.Add($"Você não pode vender essa quantidade", Severity.Error, option =>
        {
            option.CloseAfterNavigation = true;
        });
    }
}