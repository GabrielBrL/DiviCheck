@using System.Timers

@inject IAcoesService acoesService
@inject ISnackbar Snackbar


<MudGrid Justify="Justify.Center" Class="searchField" Spacing="0">
    <MudItem xs="12" sm="4">
        <MudTextField T="string" @bind-Value="@searchText" TextChanged="@FilterStockByName" Immediate="true"
                      Placeholder="Digite o ticket da empresa" Variant="Variant.Outlined" Clearable />
    </MudItem>
</MudGrid>

<div style="margin-top: 100px;">
    <ListaAcoesFiltradas containsStock="ContainsStock" FilterData="FilterData" AcoesFiltradas="AcoesFiltradas"
                         AcoesCompradas="_acoesCompradas" idUsuario="idUsuario" />
</div>

@code {
    [CascadingParameter] private Task<AuthenticationState> authenticationStateTask { get; set; }
    [Parameter] public bool FilterData { get; set; } = false;
    [Parameter] public List<StockDataDetails> AcoesFiltradas { get; set; } = new List<StockDataDetails>();
    [Parameter] public bool ContainsStock { get; set; } = true;
    [Parameter] public EventCallback<bool> LoadingItems { get; set; }
    private List<Stock> _tickets = new List<Stock>();
    private string? searchText;
    private List<StockDataDetails> _acoesCompradas = new();
    private List<StockDataDetails> _acoesAleatorias = new();
    private Snackbar _snackBar;
    private bool loading;
    private bool searchingRamdomStocks = false;
    private int idUsuario;
    private bool IsAuthenticated = false;
    private Timer typingTimer;
    protected override async Task OnInitializedAsync()
    {
        _tickets = await acoesService.GetAllTicketsAsync();
        @* var acoesStorage = await _localStore.GetItemAsync<List<StockDataDetails>>("acoes"); *@
        var user = await authenticationStateTask;
        var identity = user.User.Identity;
        IsAuthenticated = identity.IsAuthenticated;
        if (IsAuthenticated)
        {
            idUsuario = Int32.Parse(user.User.Claims.Where(_ => _.Type == "IdUsuario").Select(_ => _.Value).First());
        }
    }

    private void FilterStockByName()
    {
        FilterData = true;
        ContainsStock = true;
        InvokeAsync(() => LoadingItems.InvokeAsync(!FilterData && AcoesFiltradas.Count == 0 && ContainsStock));
        typingTimer?.Stop();
        typingTimer = new Timer(500);
        typingTimer.Elapsed += TypingTimerElapsed;
        typingTimer.Start();
    }

    void TypingTimerElapsed(object sender, ElapsedEventArgs e)
    {

        typingTimer?.Stop();
        GetItems();
        InvokeAsync(() => this.StateHasChanged());
    }

    void GetItems()
    {
        AcoesFiltradas.Clear();
        string value = searchText;
        if (value.Length > 3)
        {
            var result = _tickets.Where(x => x.Symbol.StartsWith(value, StringComparison.OrdinalIgnoreCase) ||
            x.LongName.Contains(value, StringComparison.OrdinalIgnoreCase));
            foreach (var item in result)
            {
                var stock = new StockDataDetails();
                try
                {
                    stock = acoesService.GetAcao(item.Symbol);
                }
                catch
                {
                    _snackBar = Snackbar.Add($"Não existe informação atualizada do papel {item.Symbol}", Severity.Warning);
                }
                if (stock.CurrentPrice != null)
                {
                    if (AcoesFiltradas.FirstOrDefault(x => x.Symbol == stock.Symbol) == null)
                        AcoesFiltradas.Add(stock);
                }
            }
            FilterData = false;
            if (AcoesFiltradas.Count == 0)
                ContainsStock = false;
            InvokeAsync(() => LoadingItems.InvokeAsync(!FilterData && AcoesFiltradas.Count == 0 && ContainsStock));
            return;
        }
        if (searchText.Length == 0)
            FilterData = false;
        InvokeAsync(() => LoadingItems.InvokeAsync(!FilterData && AcoesFiltradas.Count == 0 && ContainsStock));
    }
}