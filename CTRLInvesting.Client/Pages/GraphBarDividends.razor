@inject IAcoesService _acoesService
@inject ISnackbar Snackbar

<div style="background: #fff; margin-top: 10px; border-radius: 5px; width: 900px;">
    <BarChart @ref="barChart" Width="900" Class="mb-4 mr-5" />
</div>

@code {
    [Parameter]
    public string Ticket { get; set; }
    private bool isVisible = false;
    private BarChart barChart = default!;
    private BarChartOptions barChartOptions = default!;
    private ChartData chartData = default!;
    private List<string> _Labels = new List<string>();
    private List<double> _Data = new List<double>();

    protected override async void OnInitialized()
    {
        try
        {
            cData();
        }
        catch (Exception e)
        {
            Snackbar.Add("Não há dados sobre dividendos dessa empresa.", Severity.Error);
        }
    }

    void cData()
    {
        var dividendos = _acoesService.GetHistDividends(Ticket);
        List<string> formatKeys = new List<string>();
        foreach (var item in dividendos.Keys)
        {
            formatKeys.Add(DateTime.Parse(item).ToString("dd/MM/yyyy"));
        }
        List<double> formatValues = new List<double>();
        foreach (var item in dividendos.Values)
        {
            formatValues.Add(double.Parse(item.ToString("N2")));
        }
        _Labels = formatKeys;
        _Data = formatValues;
        var maxDiv = formatValues.Max();
        var minDiv = formatValues.Min();
        var colors = ColorBuilder.CategoricalTwelveColors;

        var datasets = new List<IChartDataset>();

        var dataset1 = new BarChartDataset
            {
                Data = _Data,
                BackgroundColor = new List<string> { colors[0] },
                BorderColor = new List<string> { colors[0] },
                BorderWidth = new List<double> { 2 },
                HoverBorderWidth = new List<double> { 4 },
                Label = Ticket,
            };
        datasets.Add(dataset1);

        chartData = new ChartData
            {
                Labels = _Labels,
                Datasets = datasets
            };

        barChartOptions = new();
        barChartOptions.Responsive = true;
        barChartOptions.Locale = "pt-BR";
        barChartOptions.IndexAxis = "x";
        barChartOptions.Plugins.Datalabels = new BarChartDataLabels
            {
                Color = "white"
            };
        barChartOptions.Plugins.Tooltip = new ChartPluginsTooltip
            {
                BodyFont = new ChartPluginsTooltipFont
                {
                    Size = 30,
                },
                TitleFont = new ChartPluginsTooltipFont
                {
                    Size = 20,
                }
            };
        barChartOptions.Scales.Y = new ChartAxes
            {
                Min = 0,
                Max = maxDiv + 1
            };
        barChartOptions.Layout = new ChartLayout { AutoPadding = true };
        barChartOptions.Interaction = new Interaction { Mode = InteractionMode.X };
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await barChart.InitializeAsync(chartData, barChartOptions);
        }
        await base.OnAfterRenderAsync(firstRender);
    }
}