@inject IInvestimentosService investimentos
@inject Blazored.LocalStorage.ILocalStorageService _localStore
@inject ISnackbar Snackbar
@inject IDialogService DialogService

@if (!containsStock)
{
    <MudText Align="Align.Center" Typo="Typo.h3">Não há dados sobre esse papel ou empresa.</MudText>
}
<MudGrid Class="pt-5" Justify="Justify.Center">
    @if (filterData)
    {
        <MudItem xs="12" lg="3" md="4" sm="6">
            <MudCard Elevation="20" Outlined="true" Class="rounded-lg pb-4">
                <MudSkeleton SkeletonType="SkeletonType.Rectangle" Height="150px" />
                <MudCardContent>
                    <MudStack Spacing="0" Row="true" AlignItems="AlignItems.Center" Justify="Justify.Center">
                        <MudSkeleton Width="30%" />
                        <MudSkeleton Width="30%" />
                    </MudStack>
                    <MudGrid Justify="Justify.FlexStart">
                        <MudItem xs="8" Class="pt-5">
                            <MudSkeleton Width="30%" />
                        </MudItem>
                        <MudItem xs="4" Class="pt-5">
                            <MudStack AlignItems="AlignItems.Start" Spacing="0">
                                <MudSkeleton Width="30%" />
                                <MudSkeleton Width="30%" />
                            </MudStack>
                        </MudItem>
                    </MudGrid>
                    <MudSkeleton Width="30%" />
                </MudCardContent>
                <AuthorizeView>
                    <Authorized>
                        <MudCardActions>
                            <MudGrid style="width: 100%;">
                                <MudItem xs="12" Class="ml-5 p-0">
                                    <MudStack Spacing="0" Row="true">
                                        <MudSkeleton Width="30%" />
                                    </MudStack>
                                </MudItem>
                                <MudItem xs="12">
                                    <MudStack Row="true" Spacing="0">
                                        <MudSkeleton Width="100%" />
                                    </MudStack>
                                </MudItem>
                            </MudGrid>
                        </MudCardActions>
                    </Authorized>
                </AuthorizeView>
            </MudCard>
        </MudItem>
    }
    else if (_acoesFiltradas != null && _acoesFiltradas.Count > 0)
    {
        foreach (var acao in _acoesFiltradas)
        {
            @if (acao.loading)
            {
                <MudItem xs="12" lg="3" md="4" sm="6">
                    <MudCard Class="my-2" Style="position:relative;">
                        <MudSkeleton SkeletonType="SkeletonType.Rectangle" Height="150px" />
                        <MudCardContent>
                            <MudStack Spacing="0" Row="true" AlignItems="AlignItems.Center" Justify="Justify.Center">
                                <MudSkeleton Width="30%" Height="42px;" />
                                <MudSkeleton Width="80%" />
                                <MudSkeleton Width="100%" />
                            </MudStack>
                            <MudGrid Justify="Justify.Center" Spacing="0">
                                <MudItem xs="12" Class="pt-5 pb-2">
                                    <MudStack Justify="Justify.Center" Spacing="2" Row="true">
                                        <MudSkeleton Width="30%" Height="42px;" />
                                        <MudSkeleton Width="80%" />
                                        <MudSkeleton Width="100%" />
                                    </MudStack>
                                </MudItem>
                                <MudItem xs="12">
                                    <MudSkeleton Width="100%" />
                                </MudItem>
                            </MudGrid>
                            <MudSkeleton Width="100%" />
                        </MudCardContent>
                        <MudCardActions>
                            <MudGrid style="width: 100%;">
                                <MudItem xs="12" Class="ml-5 p-0">
                                    <MudStack Spacing="0" Row="true">
                                        <MudSkeleton Width="50%" />
                                        <MudSkeleton Width="50%" />
                                    </MudStack>
                                </MudItem>
                                <MudItem xs="12">
                                    <MudStack Row="true" Spacing="0">
                                        <MudSkeleton Width="50%" Height="42px;" />
                                        <MudSkeleton Width="50%" Height="42px;" />
                                    </MudStack>
                                </MudItem>
                            </MudGrid>
                        </MudCardActions>
                        <MudOverlay Visible="@acao.loading" DarkBackground="true" Absolute="true">
                            <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
                        </MudOverlay>
                    </MudCard>
                </MudItem>
            }
            else
            {
                <MudItem xs="12" lg="3" md="4" sm="6">
                    <MudCard Elevation="20" Outlined="true" Class="rounded-lg pb-4">
                        @if (investimentos.FileExist(acao.Symbol.Substring(0, 4)))
                        {
                            <MudCardMedia Image="@($"/assets/{acao.Symbol.Substring(0,4)}.svg")" Height="150" />
                        }
                        else
                        {
                            <MudAvatar Square="true" Style="height:150px; width:100%; font-size:2rem;" Color="Color.Primary"
                                Variant="Variant.Text">
                                @acao.Symbol.Substring(0, 1)
                            </MudAvatar>
                        }
                        <MudCardContent>
                            <MudStack Spacing="0" Row="true" AlignItems="AlignItems.Center" Justify="Justify.Center">
                                <MudText Typo="Typo.h5">@acao.Symbol.Substring(0, acao.Symbol.IndexOf('.'))
                                </MudText>
                                <MudIconButton Icon="@Icons.Material.Filled.Info"
                                    OnClick="@(() => OpenInformationAboutStock(acao))" />
                            </MudStack>
                            <MudGrid Justify="Justify.FlexStart">
                                <MudItem xs="8" Class="pt-5">
                                    <MudText Align="Align.End" Typo="Typo.h4">@acao.CurrentPrice.Value.ToString("C")</MudText>
                                </MudItem>
                                <MudItem xs="4" Class="pt-5">
                                    <MudStack AlignItems="AlignItems.Start" Spacing="0">
                                        <MudText
                                            Color="(acao.VariacaoPercentual < 0 ? Color.Error : acao.VariacaoPercentual == 0 ? Color.Primary : Color.Success)"
                                            Typo="Typo.h6">
                                            @acao.VariacaoPercentual.ToString("P2")
                                        </MudText>
                                        <MudText
                                            Color="(acao.VariacaoValue < 0 ? Color.Error : acao.VariacaoValue == 0 ? Color.Primary : Color.Success)"
                                            Typo="Typo.h6">
                                            @acao.VariacaoValue.ToString("N2")
                                        </MudText>
                                    </MudStack>
                                </MudItem>
                            </MudGrid>
                            <MudListItem Icon="@Icons.Material.Filled.CalendarToday" Disabled="true">
                                <MudText Typo="Typo.body2">@(acao.DataUltCotacao.ToString("dd/MM/yyyy"))
                                </MudText>
                            </MudListItem>
                        </MudCardContent>
                        <AuthorizeView>
                            <Authorized>
                                <MudCardActions>
                                    <MudGrid style="width: 100%;">
                                        <MudItem xs="12" Class="ml-5 p-0">
                                            <MudStack Spacing="0" Row="true">
                                                <MudNumericField T="int" style="margin: 0; width: 75%;" FullWidth="false"
                                                    @bind-Value="acao.NumeroAcoes" Min="0" />
                                                <MudButton OnClick="@(() => AddToWallet(acao))" Variant="Variant.Text"
                                                    Color="Color.Primary">
                                                    Adicionar</MudButton>
                                            </MudStack>
                                        </MudItem>
                                        <MudItem xs="12" style="padding: 0;">
                                            <MudStack Row="true" Spacing="0">
                                                <MudButton OnClick="(() => UpdateNumberAcoes(10, acao))">+10</MudButton>
                                                <MudButton OnClick="(() => UpdateNumberAcoes(100, acao))">+100</MudButton>
                                            </MudStack>
                                        </MudItem>
                                    </MudGrid>
                                </MudCardActions>
                            </Authorized>
                        </AuthorizeView>
                    </MudCard>
                </MudItem>
            }
        }
    }
</MudGrid>

@code {
    [Parameter]
    public bool containsStock { get; set; }
    [Parameter]
    public bool filterData { get; set; }
    [Parameter]
    public int idUsuario {get; set;}
    [Parameter]
    public List<StockDataDetails> _acoesFiltradas { get; set; }
    [Parameter]
    public List<StockDataDetails> _acoesCompradas { get; set; }
    private Snackbar _snackBar;
    private void UpdateNumberAcoes(int number, StockDataDetails acao) => acao.NumeroAcoes += number;
    private async Task AddToWallet(StockDataDetails acao)
    {
        acao.loading = true;
        if (acao.NumeroAcoes <= 0)
        {
            _snackBar = Snackbar.Add("Número de ações inválidas.", Severity.Error);
            return;
        }        
        StockDataDetails existAcao = _acoesCompradas.FirstOrDefault(x => x.Symbol == acao.Symbol);
        if (existAcao != null)
            existAcao.NumeroAcoes += acao.NumeroAcoes;
        else
            _acoesCompradas.Add(acao);
        await _localStore.SetItemAsync<List<StockDataDetails>>("acoes", _acoesCompradas);
        var formStock = new FormStocks{IdUsuario = idUsuario, Symbol = acao.Symbol.Substring(0,acao.Symbol.IndexOf('.')),NumeroAcoes = acao.NumeroAcoes};
        await investimentos.InsertStockDataDetails(formStock);
        _snackBar = Snackbar.Add($"Parabéns!! {acao.NumeroAcoes} ações {acao.Symbol.Substring(0, acao.Symbol.IndexOf('.'))} foram adicionadas na sua carteira.",
        Severity.Success);
        acao.loading = false;
        StateHasChanged();
    }
    private async Task OpenInformationAboutStock(StockDataDetails stock)
    {
        var options = new DialogOptions
            {
                ClassBackground = "dialogInformationStock",
                MaxWidth = MaxWidth.Medium,
                FullWidth = true,
                CloseButton = true
            };
        var parameter = new DialogParameters<DialogInformationStock> { { x => x.stock, stock } };
        await DialogService.ShowAsync<DialogInformationStock>(stock.Symbol.Substring(0, stock.Symbol.IndexOf('.')), parameter,
        options);
    }

}